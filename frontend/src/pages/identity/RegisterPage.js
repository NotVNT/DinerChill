import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useApp } from '../../context/AppContext';
import '../../styles/identity/AuthPages.css';

function RegisterPage() {
  const { register } = useApp();
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: ''
  });
  
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [phoneError, setPhoneError] = useState('');
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // N·∫øu l√† tr∆∞·ªùng ƒëi·ªán tho·∫°i, ki·ªÉm tra ƒë·ªãnh d·∫°ng
    if (name === 'phone' && value.trim() !== '') {
      const phoneRegex = /^0\d{9,10}$/;
      
      if (!phoneRegex.test(value)) {
        setPhoneError('S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0 v√† c√≥ 10-11 ch·ªØ s·ªë');
      } else {
        setPhoneError('');
      }
    } else if (name === 'phone') {
      setPhoneError('');
    }
    
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Ki·ªÉm tra m·∫≠t kh·∫©u tr√πng kh·ªõp
    if (formData.password !== formData.confirmPassword) {
      setError('M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp.');
      return;
    }
    
    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i n·∫øu c√≥ nh·∫≠p
    if (formData.phone.trim() !== '') {
      const phoneRegex = /^0\d{9,10}$/;
      
      if (!phoneRegex.test(formData.phone)) {
        setPhoneError('S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0 v√† c√≥ 10-11 ch·ªØ s·ªë');
        return;
      }
    }
    
    setLoading(true);
    setError(null);
    
    try {
      await register({
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        password: formData.password
      });
      
      navigate('/');
    } catch (err) {
      setError(err.message || 'ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1>ƒêƒÉng k√Ω</h1>
            <p>T·∫°o t√†i kho·∫£n ƒë·ªÉ tr·∫£i nghi·ªám d·ªãch v·ª• ƒë·∫∑t b√†n t·ªët nh·∫•t</p>
          </div>
          
          {error && (
            <div className="auth-error">
              <i className="error-icon">‚ö†Ô∏è</i>
              <span>{error}</span>
            </div>
          )}
          
          <form onSubmit={handleSubmit} className="auth-form">
            <div className="form-group">
              <label htmlFor="name">H·ªç t√™n</label>
              <div className="input-with-icon">
                <span className="input-icon">üë§</span>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n"
                  required
                />
              </div>
            </div>
            
            <div className="form-group">
              <label htmlFor="email">Email</label>
              <div className="input-with-icon">
                <span className="input-icon">‚úâÔ∏è</span>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                  required
                />
              </div>
            </div>
            
            <div className="form-group">
              <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i (kh√¥ng b·∫Øt bu·ªôc)</label>
              <div className="input-with-icon">
                <span className="input-icon">üì±</span>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i VN (b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0)"
                />
              </div>
              {phoneError && (
                <div className="field-error">
                  <i className="error-icon">‚ö†Ô∏è</i>
                  <span>{phoneError}</span>
                </div>
              )}
            </div>
            
            <div className="form-group">
              <label htmlFor="password">M·∫≠t kh·∫©u</label>
              <div className="input-with-icon">
                <span className="input-icon">üîí</span>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  placeholder="T·∫°o m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)"
                  required
                  minLength="6"
                  autoComplete="new-password"
                />
              </div>
            </div>
            
            <div className="form-group">
              <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
              <div className="input-with-icon">
                <span className="input-icon">üîí</span>
                <input
                  type="password"
                  id="confirmPassword"
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                  required
                  minLength="6"
                  autoComplete="new-password"
                />
              </div>
            </div>
            
            <button 
              type="submit" 
              className="auth-button"
              disabled={loading || phoneError}
            >
              {loading ? 
                <><i className="loading-icon">‚è≥</i> ƒêang x·ª≠ l√Ω...</> : 
                <><i className="button-icon">üìù</i> ƒêƒÉng k√Ω</>
              }
            </button>
          </form>
          
          <div className="auth-footer">
            <p>
              ƒê√£ c√≥ t√†i kho·∫£n? <Link to="/login" className="login-link">ƒêƒÉng nh·∫≠p ngay</Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default RegisterPage; 