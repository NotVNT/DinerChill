import { Link, useNavigate } from 'react-router-dom';
import { useState, useEffect, useRef } from 'react';
import SearchBar from '../components/SearchBar';
import FilterBox from '../components/FilterBox';
import RestaurantCard from '../components/RestaurantCard';
import { useApp } from '../context/AppContext';
import { restaurantAPI } from '../services/api';
import { mockdata, useMockData } from '../components/mockData';
import '../styles/HomePage.css';

function HomePage() {
  const navigate = useNavigate(); // Gi·ªØ l·∫°i navigate
  const [showPasswordBanner, setShowPasswordBanner] = useState(true);
  const [filters, setFilters] = useState({
    area: '',
    priceRange: '',
    mainDish: '',
    occasion: '',
    promotion: '',
    privateRoom: '',
    dailyMeal: '',
    companyEvent: '',
    privateArea: '',
    familyEvent: '',
    serviceStyle: '',
    cuisineStyle: '',
  });

  const {
    hotRestaurants,
    hotProducts,
    partyRestaurants,
    famousLocations,
    seafoodRestaurants,
    chineseRestaurants,
    popularCuisines,
    monthlyFavorites,
    amenitiesRestaurants,
    luxuryRestaurants,
    trustedRestaurants,
    touristRestaurants,
    lunchSuggestions,
    newOnDinerChill,
    newsAndBlog,
    recentlyViewed,
    clearRecentlyViewed,
    loading,
    error,
  } = useApp();

  const filterRef = useRef(null);
  const [allRestaurants, setAllRestaurants] = useState([]);

  const [displayCounts, setDisplayCounts] = useState({
    hotDeals: 4,
    seafoodRestaurants: 4,
    chineseRestaurants: 4,
    popularCuisines: 4,
    partyRestaurants: 4,
    famousLocations: 4,
    touristRestaurants: 4,
    lunchSuggestions: 4,
    luxuryRestaurants: 4,
    trustedRestaurants: 4,
    monthlyFavorites: 4,
    amenitiesRestaurants: 4,
    newOnDinerChill: 4,
    newsAndBlog: 4,
  });

  useEffect(() => {
    const isBannerDismissed = localStorage.getItem('passwordBannerDismissed');
    if (isBannerDismissed === 'true') {
      setShowPasswordBanner(false);
    }

    const fetchRestaurants = async () => {
      try {
        let data;
        if (useMockData) {
          data = mockdata;
          if (!data || data.length === 0) {
            throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu m·∫´u n√†o.');
          }
        } else {
          data = await restaurantAPI.getAll();
          if (!data || data.length === 0) {
            throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API.');
          }
        }
        setAllRestaurants(data);
      } catch (err) {
        console.error('L·ªói khi t·∫£i danh s√°ch nh√† h√†ng:', err);
        setAllRestaurants([]);
      }
    };

    fetchRestaurants();
  }, []);

  const handleDismissBanner = () => {
    setShowPasswordBanner(false);
    localStorage.setItem('passwordBannerDismissed', 'true');
  };

  const areas = ['Qu·∫≠n 1', 'Qu·∫≠n 3', 'Qu·∫≠n 7', 'B√¨nh Th·∫°nh', 'Ph√∫ Nhu·∫≠n'];
  const priceRanges = ['D∆∞·ªõi 100k', '100k-200k', '200k-300k', '300k-500k', 'Tr√™n 500k'];
  const mainDishes = ['L·∫©u', 'N∆∞·ªõng', 'M√≥n √Å', 'M√≥n √Çu', 'M√≥n Nh·∫≠t', 'M√≥n H√†n'];
  const occasions = ['H·ªôi ngh·ªã', 'Truy·ªÅn th·ªëng', 'Hi·ªán ƒë·∫°i', 'Ti·ªác sinh nh·∫≠t'];
  const promotions = ['∆Øu ƒë√£i', 'ƒê·ªôc quy·ªÅn'];
  const privateRooms = ['10-20 ng∆∞·ªùi', '20-50 ng∆∞·ªùi', '50-100 ng∆∞·ªùi'];
  const dailyMeals = ['S√°ng', 'Tr∆∞a', 'Chi·ªÅu', 'T·ªëi', 'ƒê√™m', 'Khuya'];
  const companyEvents = ['Ti·ªác nh·ªè', 'Ti·ªác l·ªõn', 'Ti·ªác buffet', 'Ti·ªác c√¥ng ty ngo√†i tr·ªùi'];
  const privateAreas = ['Nh√≥m nh·ªè (d∆∞·ªõi 20)', 'Nh√≥m v·ª´a (20-50)', 'Nh√≥m l·ªõn (50-100)'];
  const familyEvents = ['Ti·ªác nh·ªè', 'Ti·ªác ·∫•m c√∫ng', 'Ti·ªác ngo√†i tr·ªùi', 'Ti·ªác ƒë√¥ng ng∆∞·ªùi'];
  const serviceStyles = ['T·∫°i b√†n', 'Buffet', 'G·ªçi m√≥n', 'T·ª± ph·ª•c v·ª•'];
  const cuisineStyles = ['Vi·ªát Nam', 'Trung Qu·ªëc', 'Nh·∫≠t B·∫£n', 'H√†n Qu·ªëc', 'Th√°i Lan', '√Çu'];

  const cuisines = [
    { name: 'Buffet', path: '/cuisines?cuisineStyle=Buffet', icon: 'fa-utensils' },
    { name: 'L·∫©u', path: '/cuisines?cuisineStyle=L·∫©u', icon: 'fa-hot-tub' },
    { name: 'N∆∞·ªõng', path: '/cuisines?cuisineStyle=N∆∞·ªõng', icon: 'fa-fire' },
    { name: 'H·∫£i s·∫£n', path: '/cuisines?cuisineStyle=H·∫£i s·∫£n', icon: 'fa-fish' },
    { name: 'Qu√°n nh·∫≠u', path: '/cuisines?cuisineStyle=Qu√°n nh·∫≠u', icon: 'fa-beer-mug-empty' },
    { name: 'M√≥n Nh·∫π', path: '/cuisines?cuisineStyle=M√≥n Nh·∫π', icon: 'fa-leaf' },
    { name: 'M√≥n Vi·ªát', path: '/cuisines?cuisineStyle=Vi·ªát Nam', icon: 'fa-bowl-rice' },
    { name: 'M√≥n H√†n', path: '/cuisines?cuisineStyle=H√†n Qu·ªëc', icon: 'fa-pepper-hot' },
    { name: 'M√≥n chay', path: '/cuisines?cuisineStyle=M√≥n chay', icon: 'fa-carrot' },
    { name: 'M√≥n kh√°c', path: '/cuisines?cuisineStyle=M√≥n kh√°c', icon: 'fa-utensil-spoon' },
  ];

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters({ ...filters, [name]: value });
  };

  const applyFilters = () => {
    // T·∫°o query string t·ª´ filters
    const queryParams = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value) {
        queryParams.append(key, value);
      }
    });
    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang /restaurants v·ªõi b·ªô l·ªçc
    navigate(`/restaurants?${queryParams.toString()}`);
  };

  const scrollFiltersLeft = () => {
    if (filterRef.current) {
      filterRef.current.scrollBy({ left: -200, behavior: 'smooth' });
    }
  };

  const scrollFiltersRight = () => {
    if (filterRef.current) {
      filterRef.current.scrollBy({ left: 200, behavior: 'smooth' });
    }
  };

  const handleLoadMore = (category, dataList) => {
    setDisplayCounts(prev => ({
      ...prev,
      [category]: prev[category] + 4,
    }));
  };

  const renderSection = (title, subtitle, link, queryParams, dataList, className, category) => {
    const displayedData = dataList.slice(0, displayCounts[category]);
    const hasMoreData = dataList.length > displayedData.length;

    return (
      <div className={`section-wrapper ${className}`}>
        <div className="section-header">
          <div className="section-title">
            <h2>{title}</h2>
            <p>{subtitle}</p>
          </div>
          <Link to={`${link}${queryParams ? `?${queryParams}` : ''}`} className="view-all">
            Xem t·∫•t c·∫£
          </Link>
        </div>
        <div className="restaurant-grid">
          {displayedData.length > 0 ? (
            displayedData.map((item) => (
              <RestaurantCard key={item.id} restaurant={item} />
            ))
          ) : (
            <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.</p>
          )}
        </div>
        {hasMoreData && (
          <button
            onClick={() => handleLoadMore(category, dataList)}
            className="load-more-btn"
            disabled={loading}
          >
            {loading ? 'ƒêang t·∫£i...' : 'T·∫£i th√™m'}
          </button>
        )}
      </div>
    );
  };

  const renderRecentlyViewed = () => {
    const allRecentlyViewed = Object.values(recentlyViewed).flat();
    if (allRecentlyViewed.length === 0) return null;

    return (
      <div className="section-wrapper recently-viewed-section">
        <div className="section-header">
          <div className="section-title">
            <h2>ƒê√£ xem g·∫ßn ƒë√¢y</h2>
            <p>Xem l·∫°i nh·ªØng nh√† h√†ng b·∫°n ƒë√£ quan t√¢m</p>
          </div>
          <button onClick={clearRecentlyViewed} className="clear-all-btn">
            X√≥a t·∫•t c·∫£
          </button>
        </div>
        <div className="restaurant-grid">
          {allRecentlyViewed.slice(0, 4).map((item) => (
            <RestaurantCard key={item.id} restaurant={item} />
          ))}
        </div>
      </div>
    );
  };

  if (loading && !hotRestaurants.length && !allRestaurants.length) return <div>ƒêang t·∫£i...</div>;
  if (error) return <div>L·ªói: {error}</div>;

  return (
    <div className="home-page">
      {showPasswordBanner && (
        <div className="password-notification-banner">
          <div className="password-notification-content">
            <span className="password-notification-icon">üîí</span>
            <div className="password-notification-text">
              <p>
                ƒê·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n, h√£y c·∫≠p nh·∫≠t m·∫≠t kh·∫©u c·ªßa b·∫°n th∆∞·ªùng xuy√™n.{' '}
                <Link to="/update-password">C·∫≠p nh·∫≠t ngay</Link>
              </p>
            </div>
            <button className="password-notification-dismiss" onClick={handleDismissBanner}>
              ‚úï
            </button>
          </div>
        </div>
      )}
      <div className="search-container">
        <SearchBar location="H·ªì Ch√≠ Minh" supportPhone="1900 6005" />
      </div>
      <div className="filter-container">
        <div className="top-filters-wrapper">
          <button className="scroll-arrow scroll-left" onClick={scrollFiltersLeft}>
            ‚Üê
          </button>
          <div className="top-filters" ref={filterRef}>
            <select name="area" value={filters.area} onChange={handleFilterChange}>
              <option value="">Khu v·ª±c</option>
              {areas.map((area) => (
                <option key={area} value={area}>{area}</option>
              ))}
            </select>
            <select name="mainDish" value={filters.mainDish} onChange={handleFilterChange}>
              <option value="">Nh√† h√†ng</option>
              {mainDishes.map((dish) => (
                <option key={dish} value={dish}>{dish}</option>
              ))}
            </select>
            <select name="priceRange" value={filters.priceRange} onChange={handleFilterChange}>
              <option value="">Gi√° trung b√¨nh</option>
              {priceRanges.map((range) => (
                <option key={range} value={range}>{range}</option>
              ))}
            </select>
            <select name="occasion" value={filters.occasion} onChange={handleFilterChange}>
              <option value="">ƒê·ªì ƒÉn ch√≠nh</option>
              {occasions.map((occasion) => (
                <option key={occasion} value={occasion}>{occasion}</option>
              ))}
            </select>
            <select name="promotion" value={filters.promotion} onChange={handleFilterChange}>
              <option value="">Ph√π h·ª£p</option>
              {promotions.map((promo) => (
                <option key={promo} value={promo}>{promo}</option>
              ))}
            </select>
            <select name="privateRoom" value={filters.privateRoom} onChange={handleFilterChange}>
              <option value="">Ph√≤ng ri√™ng</option>
              {privateRooms.map((room) => (
                <option key={room} value={room}>{room}</option>
              ))}
            </select>
            <select name="dailyMeal" value={filters.dailyMeal} onChange={handleFilterChange}>
              <option value="">B·ªØa ƒÉn h√†ng ng√†y</option>
              {dailyMeals.map((meal) => (
                <option key={meal} value={meal}>{meal}</option>
              ))}
            </select>
            <select name="companyEvent" value={filters.companyEvent} onChange={handleFilterChange}>
              <option value="">ƒê·∫∑t ti·ªác c√¥ng ty</option>
              {companyEvents.map((event) => (
                <option key={event} value={event}>{event}</option>
              ))}
            </select>
            <select name="privateArea" value={filters.privateArea} onChange={handleFilterChange}>
              <option value="">Khu ri√™ng</option>
              {privateAreas.map((area) => (
                <option key={area} value={area}>{area}</option>
              ))}
            </select>
            <select name="familyEvent" value={filters.familyEvent} onChange={handleFilterChange}>
              <option value="">ƒê·∫∑t ti·ªác gia ƒë√¨nh</option>
              {familyEvents.map((event) => (
                <option key={event} value={event}>{event}</option>
              ))}
            </select>
            <select name="serviceStyle" value={filters.serviceStyle} onChange={handleFilterChange}>
              <option value="">Ki·ªÉu ph·ª•c v·ª•</option>
              {serviceStyles.map((style) => (
                <option key={style} value={style}>{style}</option>
              ))}
            </select>
            <select name="cuisineStyle" value={filters.cuisineStyle} onChange={handleFilterChange}>
              <option value="">Phong c√°ch ·∫©m th·ª±c</option>
              {cuisineStyles.map((style) => (
                <option key={style} value={style}>{style}</option>
              ))}
            </select>
          </div>
          <button className="scroll-arrow scroll-right" onClick={scrollFiltersRight}>
            ‚Üí
          </button>
          <button className="apply-filter-button" onClick={applyFilters}>
            T√¨m ki·∫øm
          </button>
        </div>
        <div className="cuisine-filter">
          {cuisines.map((cuisine) => (
            <Link key={cuisine.name} to={cuisine.path} className="cuisine-button">
              <div className="cuisine-top">
                <i className={`fas ${cuisine.icon} cuisine-icon`}></i>
              </div>
              <div className="cuisine-content">
                <h3 className="cuisine-headline">{cuisine.name}</h3>
              </div>
            </Link>
          ))}
        </div>
      </div>
      <div className="container">
        <FilterBox />
      </div>

      {renderSection(
        '∆Øu ƒë√£i Hot',
        'Kh√°m ph√° c√°c nh√† h√†ng v√† s·∫£n ph·∫©m ƒëang c√≥ ∆∞u ƒë√£i h·∫•p d·∫´n ngay',
        '/deals',
        'promotion=∆Øu ƒë√£i',
        [...hotRestaurants, ...hotProducts].filter(item => item.promotions?.length > 0),
        'hot-deals-section',
        'hotDeals'
      )}

      {renderSection(
        'Nh√† h√†ng h·∫£i s·∫£n ngon nh·∫•t',
        'Tham kh·∫£o ngay c√°c nh√† h√†ng h·∫£i s·∫£n ƒë∆∞·ª£c y√™u th√≠ch!',
        '/restaurants',
        'cuisine=H·∫£i s·∫£n&minRating=4',
        seafoodRestaurants.length > 0
          ? seafoodRestaurants
          : allRestaurants.filter(r => r.cuisine?.toLowerCase() === 'h·∫£i s·∫£n' && r.rating >= 4),
        'seafood-restaurants-section',
        'seafoodRestaurants'
      )}

      {renderSection(
        'ƒÇn m√≥n Trung ngon ·ªü ƒë√¢u?',
        'Top qu√°n Trung ngon ƒë∆∞·ª£c DinerChill l·ª±a ch·ªçn!',
        '/restaurants',
        'cuisine=Trung Hoa&minRating=4',
        chineseRestaurants.length > 0
          ? chineseRestaurants
          : allRestaurants.filter(r => r.cuisine?.toLowerCase() === 'trung hoa' && r.rating >= 4),
        'chinese-restaurants-section',
        'chineseRestaurants'
      )}

      {renderSection(
        'Phong c√°ch ·∫©m th·ª±c ph·ªï bi·∫øn',
        'Kh√°m ph√° c√°c lo·∫°i ·∫©m th·ª±c ƒëa d·∫°ng v·ªõi ∆∞u ƒë√£i h·∫•p d·∫´n',
        '/restaurants',
        'minRating=4.5&cuisines=Vi·ªát Nam,Trung Hoa,Nh·∫≠t B·∫£n,Qu·ªëc t·∫ø',
        popularCuisines.length > 0
          ? popularCuisines
          : allRestaurants
              .filter(r => r.rating >= 4.5 && ['Vi·ªát Nam', 'Trung Hoa', 'Nh·∫≠t B·∫£n', 'Qu·ªëc t·∫ø'].includes(r.cuisine))
              .sort((a, b) => b.rating - a.rating)
              .slice(0, 5),
        'popular-cuisines-section',
        'popularCuisines'
      )}

      {renderSection(
        'Nh√† h√†ng ph√π h·ª£p ƒë·∫∑t ti·ªác',
        '∆Øu ƒë√£i ƒëa d·∫°ng gi√∫p b·∫°n d·ªÖ d√†ng l·ª±a ch·ªçn ƒë·ªãa ƒëi·ªÉm ti·ªác',
        '/restaurants',
        'suitableFor=ti·ªác&minCapacity=50',
        partyRestaurants.length > 0
          ? partyRestaurants
          : allRestaurants.filter(r => r.suitableFor?.toLowerCase().includes('ti·ªác') && r.capacity >= 50),
        'party-restaurants-section',
        'partyRestaurants'
      )}

      {renderSection(
        'ƒê·ªãa danh n·ªïi ti·∫øng',
        'Kh√°m ph√° c√°c ƒë·ªãa ƒëi·ªÉm ·∫©m th·ª±c n·ªïi b·∫≠t t·∫°i Tp.HCM',
        '/restaurants',
        'area=Qu·∫≠n 1&minRating=4.5',
        famousLocations.length > 0
          ? famousLocations
          : allRestaurants
              .filter(r => r.address?.toLowerCase().includes('qu·∫≠n 1') && r.rating >= 4.5)
              .sort((a, b) => b.rating - a.rating),
        'famous-locations-section',
        'famousLocations'
      )}

      {renderSection(
        'D√†nh cho du kh√°ch',
        'Th∆∞·ªüng th·ª©c ƒë·∫∑c s·∫£n S√†i G√≤n t·∫°i c√°c nh√† h√†ng n·ªïi b·∫≠t',
        '/restaurants',
        'suitableFor=kh√°ch du l·ªãch&minRating=4',
        touristRestaurants.length > 0
          ? touristRestaurants
          : allRestaurants.filter(r => r.suitableFor?.toLowerCase().includes('kh√°ch du l·ªãch') && r.rating >= 4),
        'tourist-restaurants-section',
        'touristRestaurants'
      )}

      {renderSection(
        'Tr∆∞a nay ƒÉn g√¨?',
        'L·ª±a ch·ªçn nhanh c√°c s·∫£n ph·∫©m ƒÉn tr∆∞a qua DinerChill',
        '/restaurants',
        'suitableFor=nh√¢n vi√™n vƒÉn ph√≤ng&openTime=11:00',
        lunchSuggestions.length > 0
          ? lunchSuggestions
          : allRestaurants.filter(r => r.suitableFor?.toLowerCase().includes('nh√¢n vi√™n vƒÉn ph√≤ng') && r.openingHours?.includes('11:00')),
        'lunch-suggestions-section',
        'lunchSuggestions'
      )}

      {renderSection(
        'Top nh√† h√†ng cao c·∫•p',
        'Kh√°m ph√° kh√¥ng gian sang tr·ªçng v·ªõi ∆∞u ƒë√£i t·ªët',
        '/restaurants',
        'minPriceRange=500000&ambiance=sang tr·ªçng',
        luxuryRestaurants.length > 0
          ? luxuryRestaurants
          : allRestaurants.filter(r => r.priceRange?.toLowerCase().includes('tr√™n 500k') && r.ambiance?.toLowerCase().includes('sang tr·ªçng')),
        'luxury-restaurants-section',
        'luxuryRestaurants'
      )}

      {renderSection(
        'ƒê·∫∑t ch·ªó uy t√≠n',
        'G·ª£i √Ω nh√† h√†ng ngon, ch·∫•t l∆∞·ª£ng qua DinerChill',
        '/restaurants',
        'minRating=4.5&minReviews=100',
        trustedRestaurants.length > 0
          ? trustedRestaurants
          : allRestaurants
              .filter(r => r.rating >= 4.5 && r.reviewCount >= 100)
              .sort((a, b) => b.rating - a.rating),
        'trusted-restaurants-section',
        'trustedRestaurants'
      )}

      {renderSection(
        'Y√™u th√≠ch nh·∫•t h√†ng th√°ng',
        'Nh√† h√†ng ƒë∆∞·ª£c ƒë·∫∑t ch·ªó nhi·ªÅu nh·∫•t trong th√°ng',
        '/restaurants',
        'minRating=4&minReviews=50',
        monthlyFavorites.length > 0
          ? monthlyFavorites
          : allRestaurants
              .filter(r => r.rating >= 4 && r.reviewCount >= 50)
              .sort((a, b) => b.reviewCount - a.reviewCount)
              .slice(0, 5),
        'monthly-favorites-section',
        'monthlyFavorites'
      )}

      {renderSection(
        'T√¨m nh√† h√†ng theo ti·ªán √≠ch',
        'L·ª±a ch·ªçn nh√† h√†ng d·ª±a tr√™n c√°c ti·ªán √≠ch ƒë·∫∑c bi·ªát',
        '/restaurants',
        'amenities=wifi,airConditioning',
        amenitiesRestaurants.length > 0
          ? amenitiesRestaurants
          : allRestaurants.filter(r => r.amenities?.wifi && r.amenities?.airConditioning),
        'amenities-restaurants-section',
        'amenitiesRestaurants'
      )}

      {renderSection(
        'M·ªõi nh·∫•t tr√™n DinerChill',
        'Kh√°m ph√° c√°c nh√† h√†ng m·ªõi nh·∫•t tr√™n n·ªÅn t·∫£ng',
        '/restaurants',
        'sortBy=createdAt&order=desc',
        newOnDinerChill.length > 0
          ? newOnDinerChill
          : allRestaurants.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(0, 5),
        'new-on-DinerChill-section',
        'newOnDinerChill'
      )}

      {renderSection(
        'Tin t·ª©c & Blog',
        'C·∫≠p nh·∫≠t th√¥ng tin h·ªØu √≠ch v·ªÅ ·∫©m th·ª±c v√† m·∫πo v·∫∑t',
        '/blog',
        '',
        newsAndBlog,
        'news-and-blog-section',
        'newsAndBlog'
      )}

      {renderRecentlyViewed()}
    </div>
  );
}

export default HomePage;