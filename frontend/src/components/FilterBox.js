import React, { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/modules/filterBox.css';

function FilterBox() {
  const [selectedFilters, setSelectedFilters] = useState({});
  const [visibleFilterStart, setVisibleFilterStart] = useState(0); // B·∫Øt ƒë·∫ßu t·ª´ filter ƒë·∫ßu ti√™n
  const [isTransitioning, setIsTransitioning] = useState(false); // State m·ªõi ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i chuy·ªÉn ƒë·ªïi
  const navigate = useNavigate();
  const categoriesSliderRef = useRef(null);
  const filtersSliderRef = useRef(null);
  
  // Danh s√°ch c√°c b·ªô l·ªçc
  const filterOptions = [
    // 5 m·ª•c l·ªçc m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã ƒë·∫ßu ti√™n
    { id: 'area', name: 'Khu v·ª±c' },
    { id: 'restaurant', name: 'Nh√† h√†ng' },
    { id: 'price', name: 'Gi√° trung b√¨nh' },
    { id: 'food', name: 'ƒê·ªì ƒÉn ch√≠nh' },
    { id: 'suitable', name: 'Ph√π h·ª£p' },
    { id: 'deal', name: '∆Øu ƒë√£i' },
    
    // C√°c m·ª•c l·ªçc kh√°c s·∫Ω hi·ªÉn th·ªã khi ng∆∞·ªùi d√πng k√©o
    { id: 'private_room', name: 'Ph√≤ng ri√™ng' },
    { id: 'daily_meal', name: 'B·ªØa ƒÉn h·∫±ng ng√†y' },
    { id: 'company_party', name: 'ƒê·∫∑t ti·ªác c√¥ng ty' },
    { id: 'private_area', name: 'Khu ri√™ng' },
    { id: 'family_party', name: 'ƒê·∫∑t ti·ªác gia ƒë√¨nh' },
    { id: 'business_type', name: 'Lo·∫°i h√¨nh kinh doanh' },
    { id: 'service_style', name: 'Ki·ªÉu ph·ª•c v·ª•' },
    { id: 'cuisine_style', name: 'Phong c√°ch ·∫©m th·ª±c' },
  ];
  
  // Danh s√°ch c√°c lo·∫°i m√≥n ƒÉn
  const cuisineTypes = [
    { id: 'grilled', name: 'N∆∞·ªõng', icon: 'üî•' },
    { id: 'seafood', name: 'H·∫£i s·∫£n', icon: 'ü¶ê' },
    { id: 'asian', name: 'Qu√°n nh·∫≠u', icon: 'üçª' },
    { id: 'japanese', name: 'M√≥n Nh·∫≠t', icon: 'üç±' },
    { id: 'vietnamese', name: 'M√≥n Vi·ªát', icon: 'üçú' },
    { id: 'korean', name: 'M√≥n H√†n', icon: 'üç≤' },
    { id: 'vegetarian', name: 'M√≥n chay', icon: 'ü•ó' },
    { id: 'american', name: 'M√≥n Ch√¢u √Å', icon: 'ü•¢' },
    { id: 'european', name: 'M√≥n Ch√¢u √Çu', icon: 'üçï' }
  ];

  // S·ªë l∆∞·ª£ng filter hi·ªÉn th·ªã c√πng l√∫c
  const visibleFiltersCount = 5;
  
  // T√≠nh to√°n c√°c filter hi·ªán ƒëang hi·ªÉn th·ªã
  const visibleFilters = filterOptions.slice(visibleFilterStart, visibleFilterStart + visibleFiltersCount);
  
  // H√†m cu·ªôn ƒë·∫øn filter ti·∫øp theo v·ªõi kho·∫£ng tr·ªÖ
  const showNextFilter = () => {
    // N·∫øu ƒëang trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi ho·∫∑c ƒë√£ ·ªü cu·ªëi danh s√°ch th√¨ kh√¥ng l√†m g√¨
    if (isTransitioning || visibleFilterStart + visibleFiltersCount >= filterOptions.length) {
      return;
    }
    
    // ƒê√°nh d·∫•u ƒëang trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi
    setIsTransitioning(true);
    
    // Cu·ªôn filtersSliderRef ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng tr∆∞·ª£t
    if (filtersSliderRef.current) {
      filtersSliderRef.current.scrollBy({
        left: 160, // Kho·∫£ng c√°ch c·ªßa m·ªôt filter
        behavior: 'smooth'
      });
    }
    
    // Ch·ªù m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi th·ª±c s·ª± c·∫≠p nh·∫≠t state
    setTimeout(() => {
      setVisibleFilterStart(visibleFilterStart + 1);
      setIsTransitioning(false);
    }, 300); // Kho·∫£ng tr·ªÖ 300ms - c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
  };
  
  // H√†m cu·ªôn v·ªÅ filter tr∆∞·ªõc ƒë√≥ v·ªõi kho·∫£ng tr·ªÖ
  const showPreviousFilter = () => {
    // N·∫øu ƒëang trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi ho·∫∑c ƒë√£ ·ªü ƒë·∫ßu danh s√°ch th√¨ kh√¥ng l√†m g√¨
    if (isTransitioning || visibleFilterStart <= 0) {
      return;
    }
    
    // ƒê√°nh d·∫•u ƒëang trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi
    setIsTransitioning(true);
    
    // Cu·ªôn filtersSliderRef ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng tr∆∞·ª£t
    if (filtersSliderRef.current) {
      filtersSliderRef.current.scrollBy({
        left: -160, // Kho·∫£ng c√°ch c·ªßa m·ªôt filter
        behavior: 'smooth'
      });
    }
    
    // Ch·ªù m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi th·ª±c s·ª± c·∫≠p nh·∫≠t state
    setTimeout(() => {
      setVisibleFilterStart(visibleFilterStart - 1);
      setIsTransitioning(false);
    }, 300); // Kho·∫£ng tr·ªÖ 300ms - c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
  };

  // H√†m ki·ªÉm tra c√≥ th·ªÉ cu·ªôn v·ªÅ filter tr∆∞·ªõc kh√¥ng
  const canScrollLeft = visibleFilterStart > 0 && !isTransitioning;
  
  // H√†m ki·ªÉm tra c√≥ th·ªÉ cu·ªôn ƒë·∫øn filter ti·∫øp theo kh√¥ng
  const canScrollRight = visibleFilterStart + visibleFiltersCount < filterOptions.length && !isTransitioning;

  const handleFilterChange = (filterId, value) => {
    setSelectedFilters({
      ...selectedFilters,
      [filterId]: value
    });
  };

  const handleCuisineSelect = (cuisineId) => {
    navigate(`/search?cuisine=${cuisineId}`);
  };

  const handleFilterClick = () => {
    const params = new URLSearchParams();
    Object.entries(selectedFilters).forEach(([key, value]) => {
      if (value) params.append(key, value);
    });

    navigate(`/search?${params.toString()}`);
  };

  // H√†m x·ª≠ l√Ω scroll cho categories slider
  const scrollCategories = (direction) => {
    if (categoriesSliderRef.current) {
      const scrollAmount = direction === 'left' ? -300 : 300;
      categoriesSliderRef.current.scrollBy({
        left: scrollAmount,
        behavior: 'smooth'
      });
    }
  };

  return (
    <div className="filter-box">
      <div className="filters-container">
        <button 
          className={`filter-nav prev ${canScrollLeft ? '' : 'hidden'}`}
          onClick={showPreviousFilter}
          disabled={isTransitioning}
        >
          <span>‚Üê</span>
        </button>
        
        <div className="filter-section" ref={filtersSliderRef}>
          {visibleFilters.map((filter) => (
            <div key={filter.id} className="filter-dropdown">
              <select
                className="filter-select"
                value={selectedFilters[filter.id] || ''}
                onChange={(e) => handleFilterChange(filter.id, e.target.value)}
              >
                <option value="">{filter.name}</option>
                <option value="option1">T√πy ch·ªçn 1</option>
                <option value="option2">T√πy ch·ªçn 2</option>
                <option value="option3">T√πy ch·ªçn 3</option>
              </select>
              <span className="dropdown-icon">‚ñº</span>
            </div>
          ))}
          
          <button 
            className={`filter-nav next custom-position ${canScrollRight ? '' : 'hidden'}`}
            onClick={showNextFilter}
            disabled={isTransitioning}
          >
            <span>‚Üí</span>
          </button>
          
          <div className="filter-button">
            <button 
              className="filter-btn"
              onClick={handleFilterClick}
            >
              <span className="filter-icon">‚öôÔ∏è</span> L·ªçc
            </button>
          </div>
        </div>
      </div>

      <div className="cuisine-categories">
        <button 
          className="category-nav prev" 
          onClick={() => scrollCategories('left')}
        >
          <span>‚Üê</span>
        </button>
        
        <div className="categories-slider" ref={categoriesSliderRef}>
          {cuisineTypes.map((cuisine) => (
            <div 
              key={cuisine.id} 
              className="category-item" 
              onClick={() => handleCuisineSelect(cuisine.id)}
            >
              <div className="category-icon">{cuisine.icon}</div>
              <span className="category-name">{cuisine.name}</span>
            </div>
          ))}
        </div>
        
        <button 
          className="category-nav next" 
          onClick={() => scrollCategories('right')}
        >
          <span>‚Üí</span>
        </button>
      </div>
    </div>
  );
}

export default FilterBox; 