import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useApp } from '../context/AppContext';
import '../styles/modules/filterBox.css';
import '../styles/modules/booth_categories.css';

function FilterBox() {
  const { filters = { location: '', distance: '', rating: '', cuisine: '' }, setFilters } = useApp();
  const [visibleFilterStart, setVisibleFilterStart] = useState(0);
  const [visibleCategoryStart, setVisibleCategoryStart] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [isCategoryTransitioning, setIsCategoryTransitioning] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isAtEnd, setIsAtEnd] = useState(false);
  const navigate = useNavigate();
  const filtersSliderRef = useRef(null);
  const categoriesSliderRef = useRef(null);

  // Danh s√°ch c√°c b·ªô l·ªçc (ch·ªâ gi·ªØ 3 b·ªô l·ªçc ch√≠nh)
  const filterOptions = [
    { id: 'location', name: 'Khu v·ª±c' },
    { id: 'distance', name: 'Kho·∫£ng c√°ch' },
    { id: 'rating', name: 'ƒê√°nh gi√°' },
  ];

  // Danh s√°ch c√°c lo·∫°i m√≥n ƒÉn (booth categories) - ƒë·∫°i di·ªán cho b·ªô l·ªçc "Lo·∫°i h√¨nh nh√† h√†ng"
  const cuisineTypes = [
    { id: 'buffet', name: 'Buffet', icon: 'üç±' },
    { id: 'hotpot', name: 'L·∫©u', icon: 'üç≤' },
    { id: 'grilled', name: 'N∆∞·ªõng', icon: 'üî•' },
    { id: 'seafood', name: 'H·∫£i s·∫£n', icon: 'ü¶ê' },
    { id: 'beer', name: 'Qu√°n nh·∫≠u', icon: 'üçª' },
    { id: 'japanese', name: 'M√≥n Nh·∫≠t', icon: 'üç£' },
    { id: 'vietnamese', name: 'M√≥n Vi·ªát', icon: 'üçú' },
    { id: 'korean', name: 'M√≥n H√†n', icon: 'üç≤' },
    { id: 'vegetarian', name: 'M√≥n chay', icon: 'ü•ó' },
    { id: 'asian', name: 'M√≥n Ch√¢u √Å', icon: 'ü•¢' },
    { id: 'european', name: 'M√≥n Ch√¢u √Çu', icon: 'üçï' },
    { id: 'thai', name: 'M√≥n Th√°i', icon: 'üç∏' },
    { id: 'chinese', name: 'M√≥n Trung Hoa', icon: 'ü•ü' },
  ];

  // S·ªë l∆∞·ª£ng filter hi·ªÉn th·ªã c√πng l√∫c
  const visibleFiltersCount = 3; // V√¨ ch·ªâ c√≥ 3 b·ªô l·ªçc, kh√¥ng c·∫ßn cu·ªôn ngang n·ªØa

  // S·ªë l∆∞·ª£ng categories hi·ªÉn th·ªã c√πng l√∫c
  const visibleCategoriesCount = 8;

  // T√≠nh to√°n c√°c filter hi·ªán ƒëang hi·ªÉn th·ªã
  const visibleFilters = filterOptions.slice(
    visibleFilterStart,
    visibleFilterStart + visibleFiltersCount
  );

  // T√≠nh to√°n c√°c categories hi·ªán ƒëang hi·ªÉn th·ªã
  const visibleCategories = cuisineTypes.slice(
    visibleCategoryStart,
    visibleCategoryStart + visibleCategoriesCount
  );

  const showNextFilter = () => {
    if (isTransitioning || visibleFilterStart + visibleFiltersCount >= filterOptions.length) {
      return;
    }
    setIsTransitioning(true);
    if (filtersSliderRef.current) {
      filtersSliderRef.current.scrollBy({
        left: 160,
        behavior: 'smooth',
      });
    }
    setTimeout(() => {
      setVisibleFilterStart(visibleFilterStart + 1);
      setIsTransitioning(false);
    }, 300);
  };

  const showPreviousFilter = () => {
    if (isTransitioning || visibleFilterStart <= 0) {
      return;
    }
    setIsTransitioning(true);
    if (filtersSliderRef.current) {
      filtersSliderRef.current.scrollBy({
        left: -160,
        behavior: 'smooth',
      });
    }
    setTimeout(() => {
      setVisibleFilterStart(visibleFilterStart - 1);
      setIsTransitioning(false);
    }, 300);
  };

  const canScrollLeft = visibleFilterStart > 0 && !isTransitioning;
  const canScrollRight =
    visibleFilterStart + visibleFiltersCount < filterOptions.length && !isTransitioning;

  const handleFilterChange = (filterId, value) => {
    if (!setFilters) return;
    setFilters({
      ...filters,
      [filterId]: value,
    });
  };

  const handleCuisineSelect = (cuisineId) => {
    if (!setFilters) return;
    setFilters({
      ...filters,
      cuisine: cuisineId,
    });
    navigate({
      pathname: '/restaurants',
      search: `?cuisine=${cuisineId}`,
    });
  };

  const scrollCategories = (direction) => {
    if (isCategoryTransitioning) return; // S·ª≠a t·ª´ ifSummon th√†nh if v√† th√™m d·∫•u ch·∫•m ph·∫©y

    setIsCategoryTransitioning(true);

    if (direction === 'left' && visibleCategoryStart > 0) {
      if (categoriesSliderRef.current) {
        categoriesSliderRef.current.scrollBy({
          left: -200,
          behavior: 'smooth',
        });
      }
      setTimeout(() => {
        setVisibleCategoryStart(visibleCategoryStart - 1);
        setIsCategoryTransitioning(false);
        if (visibleCategoryStart <= 1) {
          setIsScrolled(false);
        }
        setIsAtEnd(false);
      }, 300);
    } else if (
      direction === 'right' &&
      visibleCategoryStart + visibleCategoriesCount < cuisineTypes.length
    ) {
      if (categoriesSliderRef.current) {
        categoriesSliderRef.current.scrollBy({
          left: 200,
          behavior: 'smooth',
        });
      }
      setTimeout(() => {
        const newPosition = visibleCategoryStart + 1;
        setVisibleCategoryStart(newPosition);
        setIsCategoryTransitioning(false);
        setIsScrolled(true);
        if (newPosition + visibleCategoriesCount >= cuisineTypes.length) {
          setIsAtEnd(true);
        }
      }, 300);
    } else {
      setIsCategoryTransitioning(false);
    }
  };

  const handleCategoriesScroll = () => {
    if (categoriesSliderRef.current) {
      setIsScrolled(categoriesSliderRef.current.scrollLeft > 0);
    }
  };

  useEffect(() => {
    const slider = categoriesSliderRef.current;
    if (slider) {
      slider.addEventListener('scroll', handleCategoriesScroll);
      return () => {
        slider.removeEventListener('scroll', handleCategoriesScroll);
      };
    }
  }, []);

  useEffect(() => {
    if (visibleCategoryStart + visibleCategoriesCount >= cuisineTypes.length) {
      setIsAtEnd(true);
    } else {
      setIsAtEnd(false);
    }
  }, [visibleCategoryStart, visibleCategoriesCount, cuisineTypes.length]);

  // N·∫øu filters ho·∫∑c setFilters kh√¥ng t·ªìn t·∫°i, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  if (!filters || !setFilters) {
    return <div>L·ªói: Kh√¥ng th·ªÉ truy c·∫≠p AppContext. Vui l√≤ng ki·ªÉm tra AppProvider.</div>;
  }

  return (
    <div className="filter-box">
      <div className="filters-container">
        <button
          className={`filter-nav prev ${canScrollLeft ? '' : 'hidden'}`}
          onClick={showPreviousFilter}
          disabled={isTransitioning}
        >
          <span>‚Üê</span>
        </button>

        <div className="filter-section" ref={filtersSliderRef}>
          {visibleFilters.map((filter) => (
            <div key={filter.id} className="filter-dropdown">
              <select
                className="filter-select"
                value={filters[filter.id] || ''}
                onChange={(e) => handleFilterChange(filter.id, e.target.value)}
              >
                {filter.id === 'location' && (
                  <>
                    <option value="">{filter.name}</option>
                    <option value="H·ªì Ch√≠ Minh">H·ªì Ch√≠ Minh</option>
                    <option value="H√† N·ªôi">H√† N·ªôi</option>
                    <option value="ƒê√† N·∫µng">ƒê√† N·∫µng</option>
                  </>
                )}
                {filter.id === 'distance' && (
                  <>
                    <option value="">{filter.name}</option>
                    <option value="all">T·∫•t c·∫£</option>
                    <option value="near">G·∫ßn nh·∫•t</option>
                    <option value="under5km">D∆∞·ªõi 5km</option>
                    <option value="under10km">D∆∞·ªõi 10km</option>
                  </>
                )}
                {filter.id === 'rating' && (
                  <>
                    <option value="">{filter.name}</option>
                    <option value="all">T·∫•t c·∫£</option>
                    <option value="above4">Tr√™n 4 sao</option>
                    <option value="above3">Tr√™n 3 sao</option>
                  </>
                )}
              </select>
              <span className="dropdown-icon">‚ñº</span>
            </div>
          ))}

          <button
            className={`filter-nav next custom-position ${canScrollRight ? '' : 'hidden'}`}
            onClick={showNextFilter}
            disabled={isTransitioning}
          >
            <span>‚Üí</span>
          </button>
        </div>
      </div>

      <div className="booth-categories">
        <button
          className={`category-nav prev ${!isScrolled ? 'hidden' : ''}`}
          onClick={() => scrollCategories('left')}
        >
          <span>‚Üê</span>
        </button>

        <div className="categories-slider" ref={categoriesSliderRef}>
          {visibleCategories.map((cuisine) => (
            <div
              key={cuisine.id}
              className="category-item"
              onClick={() => handleCuisineSelect(cuisine.id)}
            >
              <div className="category-icon-wrapper">
                <span className="category-icon">{cuisine.icon}</span>
              </div>
              <span className="category-name">{cuisine.name}</span>
            </div>
          ))}
        </div>

        <button
          className={`category-nav next ${isAtEnd ? 'hidden' : ''}`}
          onClick={() => scrollCategories('right')}
        >
          <span>‚Üí</span>
        </button>
      </div>
    </div>
  );
}

export default FilterBox;